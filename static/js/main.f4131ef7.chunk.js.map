{"version":3,"sources":["firebase.ts","Image.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","props","src","alt","useState","cat1","setCat1","cat2","setCat2","UpdateImages","fetch","then","response","json","useEffect","className","Image","url","style","left","onClick","itemsRef","database","ref","item","id","matches","votes","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iRAUAA,IAASC,cATM,CACbC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,8CAGMR,QAAf,ECTe,WAACS,GAAD,OAAqCA,EAAMC,IAAM,yBAAKA,IAAKD,EAAMC,IAAKC,IAAI,KAAQ,MCGlF,aAA2B,IAAD,EAEfC,mBAAS,MAFM,mBAEhCC,EAFgC,KAE1BC,EAF0B,OAGfF,mBAAS,MAHM,mBAGhCG,EAHgC,KAG1BC,EAH0B,KAKvC,SAASC,IACPC,MAAM,wDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIN,EAAQM,EAAS,OAEnCF,MAAM,wDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIJ,EAAQI,EAAS,OA6BrC,OA1BAE,qBAAU,WACRL,MACC,IAyBDJ,GAAQE,EACN,oCACE,yBAAKQ,UAAU,eACb,kBAACC,EAAD,CAAOd,IAAKG,EAAKY,OAEnB,yBAAKF,UAAU,cAAcG,MAAO,CAACC,KAAM,QACzC,kBAACH,EAAD,CAAOd,IAAKK,EAAKU,OAEnB,yBAAKF,UAAU,UAAf,MACA,yBAAKA,UAAU,QAAQK,QAhC7B,WACE,IAAMC,EAAW7B,EAAS8B,WAAWC,IAAI,QACnCC,EAAO,CACXC,GAAIpB,EAAKoB,GACTC,QAAS,EACTC,MAAO,GAETN,EAASO,KAAKJ,GACdf,MAwBI,SACA,yBAAKM,UAAU,QAAQK,QAtB7B,WACE,IAAMC,EAAW7B,EAAS8B,WAAWC,IAAI,QACnCC,EAAO,CACXC,GAAIlB,EAAKkB,GACTC,QAAS,EACTC,MAAO,GAETN,EAASO,KAAKJ,GACdf,MAcI,UAEF,MC/CcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4131ef7.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nconst config = {\r\n  apiKey: \"AIzaSyBeobdOJ-PFkIlswatl67ZRUatd4wSO5G8\",\r\n  authDomain: \"cat-rating.firebaseapp.com\",\r\n  databaseURL: \"https://cat-rating.firebaseio.com\",\r\n  projectId: \"cat-rating\",\r\n  storageBucket: \"cat-rating.appspot.com\",\r\n  messagingSenderId: \"129371911466\",\r\n  appId: \"1:129371911466:web:3abefac46e0e3b626ada53\"\r\n};\r\nfirebase.initializeApp(config);\r\nexport default firebase;\r\n","import React from 'react';\r\n\r\nexport default (props: any): JSX.Element | null => (props.src ? <img src={props.src} alt='' /> : null);\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport firebase from './firebase';\nimport Image from './Image';\n\nexport default (): JSX.Element | null => {\n\n  const [cat1, setCat1] = useState(null as any | null);\n  const [cat2, setCat2] = useState(null as any | null);\n\n  function UpdateImages() {\n    fetch('https://api.thecatapi.com/v1/images/search?size=full')\n    .then(response => response.json())\n    .then(response => setCat1(response[0]));\n\n    fetch('https://api.thecatapi.com/v1/images/search?size=full')\n    .then(response => response.json())\n    .then(response => setCat2(response[0]));\n  }\n\n  useEffect(() => {\n    UpdateImages();\n  }, []);\n\n  function voteCat1() {\n    const itemsRef = firebase.database().ref('cats');\n    const item = {\n      id: cat1.id,\n      matches: 1,\n      votes: 1\n    }\n    itemsRef.push(item);\n    UpdateImages();\n  }\n\n  function voteCat2() {\n    const itemsRef = firebase.database().ref('cats');\n    const item = {\n      id: cat2.id,\n      matches: 1,\n      votes: 1\n    }\n    itemsRef.push(item);\n    UpdateImages();\n  }\n\n  return (\n    cat1 && cat2\n    ? <>\n        <div className='placeholder'>\n          <Image src={cat1.url} />\n        </div>\n        <div className='placeholder' style={{left: '50%'}}>\n          <Image src={cat2.url} />\n        </div>\n        <div className='banner'>VS</div>\n        <div className='vote1' onClick={voteCat1}>Cat 1</div>\n        <div className='vote2' onClick={voteCat2}>Cat 2</div>\n      </>\n    : null\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}